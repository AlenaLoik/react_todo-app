{"version":3,"sources":["components/TodoList/TodoList.js","components/NewTodo/NewTodo.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoList","todos","remuve","toggleComplete","className","map","todo","key","id","completed","checked","onClick","type","htmlFor","content","NewTodo","state","handleChange","event","setState","target","value","trim","handleSubmit","e","preventDefault","props","addTodo","prevState","onSubmit","this","onChange","placeholder","Component","TodosFilter","updateTodosToShow","href","App","showParam","todoToShow","handleRemuve","filter","handleRemuveCompleted","toggleCompleteAll","every","todoView","itemLeft","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dbc6a15.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const TodoList = ({ todos, remuve, toggleComplete }) => (\r\n  <ul className=\"todo-list\">\r\n    {todos.map(todo => (\r\n      <li key={todo.id}>\r\n        <div className={todo.completed ? 'completed' : 'view'}>\r\n          <input\r\n            checked={todo.completed}\r\n            onClick={() => {\r\n              toggleComplete(todo.id);\r\n            }}\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            id={`todo-${todo.id}`}\r\n          />\r\n          <label htmlFor={`todo-${todo.id}`}>{todo.content}</label>\r\n          <button\r\n            onClick={() => {\r\n              remuve(todo.id);\r\n            }}\r\n            type=\"button\"\r\n            className=\"destroy\"\r\n          />\r\n        </div>\r\n        <input type=\"text\" className=\"edit\" />\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      content: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      completed: PropTypes.bool.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  remuve: PropTypes.func.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport './NewTodo.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NewTodo extends Component {\r\n  state = {\r\n    content: '',\r\n    id: 1,\r\n    completed: false,\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      content: event.target.value.trim(),\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.state.content) {\r\n      this.props.addTodo(this.state);\r\n\r\n      this.setState(prevState => ({\r\n        content: '',\r\n        id: prevState.id + 1,\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          onChange={this.handleChange}\r\n          value={this.state.content}\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodo;\r\n\r\nNewTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport './TodosFilter.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const TodosFilter = ({ updateTodosToShow }) => (\r\n  <ul className=\"filters\">\r\n    <li>\r\n      <a\r\n        href=\"#/\"\r\n        onClick={() => (updateTodosToShow('all'))}\r\n      >\r\n        All\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a\r\n        href=\"#/active\"\r\n        onClick={() => (updateTodosToShow('active'))}\r\n      >\r\n        Active\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a\r\n        href=\"#/completed\"\r\n        onClick={() => (updateTodosToShow('completed'))}\r\n      >\r\n        Completed\r\n      </a>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nTodosFilter.propTypes = {\r\n  updateTodosToShow: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { TodoList } from './components/TodoList/TodoList';\r\nimport NewTodo from './components/NewTodo/NewTodo';\r\nimport { TodosFilter } from './components/TodosFilter/TodosFilter';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [],\r\n    showParam: 'all',\r\n  };\r\n\r\n  addTodo = (todo) => {\r\n    this.setState(prevState => ({\r\n      todos: [...prevState.todos, todo],\r\n    }));\r\n  }\r\n\r\n  updateTodosToShow = (todoToShow) => {\r\n    this.setState({ showParam: todoToShow });\r\n  }\r\n\r\n  handleRemuve = (id) => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.filter(todo => (\r\n        todo.id !== id\r\n      )),\r\n    }));\r\n  }\r\n\r\n  handleRemuveCompleted = () => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.filter(todo => (\r\n        !todo.completed\r\n      )),\r\n    }));\r\n  }\r\n\r\n  toggleComplete = (id) => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n          };\r\n        }\r\n\r\n        return todo;\r\n      }),\r\n    }));\r\n  }\r\n\r\n  toggleCompleteAll = () => {\r\n    if (this.state.todos.every(todo => (todo.completed))) {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.map(todo => ({\r\n          ...todo,\r\n          completed: false,\r\n        })),\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.map(todo => ({\r\n          ...todo,\r\n          completed: true,\r\n        })),\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let todoView = [];\r\n    const itemLeft = this.state.todos.filter(todo => (\r\n      !todo.completed)).length;\r\n\r\n    switch (this.state.showParam) {\r\n      case 'active':\r\n        todoView = [...this.state.todos].filter(todo => (\r\n          !todo.completed\r\n        ));\r\n        break;\r\n      case 'completed':\r\n        todoView = [...this.state.todos].filter(todo => (\r\n          todo.completed\r\n        ));\r\n        break;\r\n      default:\r\n        todoView = [...this.state.todos];\r\n    }\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <header className=\"header\">\r\n          <h1>todos</h1>\r\n          <NewTodo addTodo={this.addTodo} />\r\n        </header>\r\n        {(this.state.todos.length)\r\n          ? (\r\n            <>\r\n              <section className=\"main\">\r\n                <input\r\n                  onClick={this.toggleCompleteAll}\r\n                  checked={!itemLeft}\r\n                  type=\"checkbox\"\r\n                  id=\"toggle-all\"\r\n                  className=\"toggle-all\"\r\n                />\r\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n                <TodoList\r\n                  todos={todoView}\r\n                  remuve={this.handleRemuve}\r\n                  toggleComplete={this.toggleComplete}\r\n                />\r\n              </section>\r\n\r\n              <footer className=\"footer\">\r\n                <span className=\"todo-count\">\r\n                  {itemLeft}\r\n                  item left\r\n                </span>\r\n                <TodosFilter updateTodosToShow={this.updateTodosToShow} />\r\n                {\r\n                  (this.state.todos.filter(todo => (\r\n                    todo.completed)).length)\r\n                    ? (\r\n                      <button\r\n                        onClick={this.handleRemuveCompleted}\r\n                        type=\"button\"\r\n                        className=\"clear-completed\"\r\n                      >\r\n                        Clear completed\r\n                      </button>\r\n                    )\r\n                    : ('')\r\n                }\r\n              </footer>\r\n            </>\r\n          ) : ''}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}