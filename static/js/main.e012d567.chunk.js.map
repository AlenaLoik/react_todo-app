{"version":3,"sources":["components/TodoList/TodoList.js","components/NewTodo/NewTodo.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoList","state","content","submitEditing","handleChange","event","setState","target","value","trim","handleSubmit","e","preventDefault","props","editTodo","className","this","todos","map","todo","key","id","editing","onSubmit","completed","onClick","toggleComplete","checked","type","htmlFor","onDoubleClick","handleDobleClick","remuve","onChange","onKeyUp","Component","NewTodo","addTodo","prevState","placeholder","TodosFilter","updateTodosToShow","href","App","showParam","todoToShow","handleRemuve","filter","handleRemuveCompleted","toggleCompleteAll","every","todoView","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e012d567.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoList extends Component {\n  state = {\n    content: '',\n    submitEditing: true,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      content: event.target.value.trim(),\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.editTodo(this.state.content);\n    this.setState({\n      submitEditing: false,\n    });\n  }\n\n  render() {\n    return (\n      <ul className=\"todo-list\">\n        {this.props.todos.map(todo => (\n          <li\n            key={todo.id}\n            className={(todo.editing && this.state.submitEditing)\n              ? 'editing' : ''}\n          >\n            <form\n              onSubmit={this.handleSubmit}\n            >\n              <div\n                className={todo.completed ? 'completed' : 'view'}\n\n              >\n                <input\n                  onClick={() => {\n                    this.props.toggleComplete(todo.id);\n                  }}\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  className=\"toggle\"\n                  id={`todo-${todo.id}`}\n                />\n                <label\n                  htmlFor={`edit-${todo.id}`}\n                  onDoubleClick={() => {\n                    this.props.handleDobleClick(todo);\n                    this.setState(() => ({\n                      content: todo.content,\n                      submitEditing: true,\n                    }));\n                  }}\n                >\n                  {todo.content}\n                </label>\n                <button\n                  onClick={() => {\n                    this.props.remuve(todo.id);\n                  }}\n                  type=\"button\"\n                  className=\"destroy\"\n                />\n              </div>\n\n              <input\n                type=\"text\"\n                className=\"edit\"\n                id={`edit-${todo.id}`}\n                value={this.state.content}\n                onChange={this.handleChange}\n                onKeyUp={(e) => {\n                  if (e.key === 'Escape') {\n                    this.setState({ submitEditing: false });\n                  }\n                }\n                }\n              />\n            </form>\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      content: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  remuve: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  handleDobleClick: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './NewTodo.css';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends Component {\n  state = {\n    content: '',\n    id: 1,\n    completed: false,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      content: event.target.value.trim(),\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.content) {\n      this.props.addTodo(this.state);\n\n      this.setState(prevState => ({\n        content: '',\n        id: prevState.id + 1,\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={this.handleChange}\n          value={this.state.content}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default NewTodo;\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodosFilter.css';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ updateTodosToShow }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        onClick={() => (updateTodosToShow('all'))}\n      >\n        All\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/active\"\n        onClick={() => (updateTodosToShow('active'))}\n      >\n        Active\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/completed\"\n        onClick={() => (updateTodosToShow('completed'))}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  updateTodosToShow: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport TodoList from './components/TodoList/TodoList';\nimport NewTodo from './components/NewTodo/NewTodo';\nimport { TodosFilter } from './components/TodosFilter/TodosFilter';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    showParam: 'all',\n  };\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  updateTodosToShow = (todoToShow) => {\n    this.setState({ showParam: todoToShow });\n  }\n\n  handleRemuve = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        todo.id !== id\n      )),\n    }));\n  }\n\n  handleDobleClick = ({ id }) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        (todo.id !== id) ? ({\n          ...todo, editing: false,\n        }) : ({\n          ...todo, editing: true,\n        })\n      )),\n    }));\n  }\n\n  editTodo = (content) => {\n    if (content) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => (\n          (todo.editing) ? ({\n            ...todo, content,\n          }) : todo)),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.filter(todo => (\n          !todo.editing\n        )),\n      }));\n    }\n  }\n\n  handleRemuveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        !todo.completed\n      )),\n    }));\n  }\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  toggleCompleteAll = () => {\n    if (this.state.todos.every(todo => (todo.completed))) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  render() {\n    let todoView = [];\n\n    switch (this.state.showParam) {\n      case 'active':\n        todoView = [...this.state.todos].filter(todo => (\n          !todo.completed\n        ));\n        break;\n      case 'completed':\n        todoView = [...this.state.todos].filter(todo => (\n          todo.completed\n        ));\n        break;\n      default:\n        todoView = [...this.state.todos];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n        {(this.state.todos.length)\n          ? (\n            <>\n              <section className=\"main\">\n                <input\n                  onClick={this.toggleCompleteAll}\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n                <TodoList\n                  todos={todoView}\n                  remuve={this.handleRemuve}\n                  toggleComplete={this.toggleComplete}\n                  handleDobleClick={this.handleDobleClick}\n                  editTodo={this.editTodo}\n                />\n              </section>\n\n              <footer className=\"footer\">\n                <span className=\"todo-count\">\n                  {this.state.todos.filter(todo => (\n                    !todo.completed)).length}\n                  item left\n                </span>\n                <TodosFilter updateTodosToShow={this.updateTodosToShow} />\n                {\n                  (this.state.todos.filter(todo => (\n                    todo.completed)).length)\n                    ? (\n                      <button\n                        onClick={this.handleRemuveCompleted}\n                        type=\"button\"\n                        className=\"clear-completed\"\n                      >\n                        Clear completed\n                      </button>\n                    )\n                    : ('')\n                }\n              </footer>\n            </>\n          ) : ''}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}