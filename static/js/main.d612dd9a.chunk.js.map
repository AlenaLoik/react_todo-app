{"version":3,"sources":["components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/Footer/Footer.js","components/NewTodo/NewTodo.js","components/Header/Header.js","App.js","index.js"],"names":["TodoList","state","content","submitEditing","handleChange","event","setState","target","value","trim","handleSubmit","e","preventDefault","props","editTodo","handleEdit","todo","handleDobleClick","className","this","todos","map","key","id","editing","onSubmit","completed","onClick","toggleComplete","checked","type","htmlFor","onDoubleClick","remove","onChange","onKeyUp","Component","TodosFilter","updateTodosToShow","status","href","Footer","handleRemoveCompleted","itemLeft","filter","length","NewTodo","Date","now","addTodo","prevState","placeholder","Header","App","showParam","todoToShow","handleRemove","toggleCompleteAll","every","getTodos","todoView","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d612dd9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoList extends Component {\r\n  state = {\r\n    content: '',\r\n    submitEditing: true,\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      content: event.target.value.trim(),\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.editTodo(this.state.content);\r\n    this.setState({\r\n      submitEditing: false,\r\n    });\r\n  }\r\n\r\n  handleEdit = (todo) => {\r\n    this.props.handleDobleClick(todo);\r\n    this.setState(() => ({\r\n      content: todo.content,\r\n      submitEditing: true,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"todo-list\">\r\n        {this.props.todos.map(todo => (\r\n          <li\r\n            key={todo.id}\r\n            className={(todo.editing && this.state.submitEditing)\r\n              ? 'editing' : ''}\r\n          >\r\n            <form onSubmit={this.handleSubmit}>\r\n              <div className={todo.completed ? 'completed' : 'view'}>\r\n                <input\r\n                  onClick={() => {\r\n                    this.props.toggleComplete(todo.id);\r\n                  }}\r\n                  checked={todo.completed}\r\n                  type=\"checkbox\"\r\n                  className=\"toggle\"\r\n                  id={`todo-${todo.id}`}\r\n                />\r\n                <label\r\n                  htmlFor={`edit-${todo.id}`}\r\n                  onDoubleClick={() => {\r\n                    this.handleEdit(todo);\r\n                  }}\r\n                >\r\n                  {todo.content}\r\n                </label>\r\n                <button\r\n                  onClick={() => {\r\n                    this.props.remove(todo.id);\r\n                  }}\r\n                  type=\"button\"\r\n                  className=\"destroy\"\r\n                />\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"edit\"\r\n                id={`edit-${todo.id}`}\r\n                value={this.state.content}\r\n                onChange={this.handleChange}\r\n                onKeyUp={(e) => {\r\n                  if (e.key === 'Escape') {\r\n                    this.setState({ submitEditing: false });\r\n                  }\r\n                }\r\n                }\r\n              />\r\n            </form>\r\n          </li>\r\n        ))\r\n        }\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      content: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      completed: PropTypes.bool.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  remove: PropTypes.func.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n  handleDobleClick: PropTypes.func.isRequired,\r\n  editTodo: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport './TodosFilter.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const TodosFilter = ({ updateTodosToShow }) => {\r\n  const statuses = ['all', 'active', 'completed'];\r\n\r\n  return (\r\n    <ul className=\"filters\">\r\n      {statuses.map(status => (\r\n        <li>\r\n          <a\r\n            href={`#/${status}`}\r\n            onClick={() => (updateTodosToShow(status))}\r\n          >\r\n            {status}\r\n          </a>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nTodosFilter.propTypes = {\r\n  updateTodosToShow: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport './Footer.css';\r\nimport PropTypes from 'prop-types';\r\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\r\n\r\nexport const Footer = ({\r\n  todos,\r\n  updateTodosToShow,\r\n  handleRemoveCompleted,\r\n  itemLeft,\r\n}) => (\r\n  <footer className=\"footer\">\r\n    <span className=\"todo-count\">\r\n      {itemLeft}\r\n      {' '}\r\n      item left\r\n    </span>\r\n    <TodosFilter updateTodosToShow={updateTodosToShow} />\r\n    {\r\n      (todos.filter(todo => (todo.completed)).length)\r\n        ? (\r\n          <button\r\n            onClick={handleRemoveCompleted}\r\n            type=\"button\"\r\n            className=\"clear-completed\"\r\n          >\r\n            Clear completed\r\n          </button>\r\n        )\r\n        : ('')\r\n    }\r\n  </footer>\r\n);\r\n\r\nFooter.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      content: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      completed: PropTypes.bool.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  updateTodosToShow: PropTypes.func.isRequired,\r\n  handleRemoveCompleted: PropTypes.func.isRequired,\r\n  itemLeft: PropTypes.number.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport './NewTodo.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NewTodo extends Component {\r\n  state = {\r\n    content: '',\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      content: event.target.value.trim(),\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { content } = this.state;\r\n    const id = +Date.now();\r\n    const completed = false;\r\n    const todo = {\r\n      content, id, completed,\r\n    };\r\n\r\n    if (content) {\r\n      this.props.addTodo(todo);\r\n\r\n      this.setState(prevState => ({\r\n        content: '',\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          onChange={this.handleChange}\r\n          value={this.state.content}\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodo;\r\n\r\nNewTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport PropTypes from 'prop-types';\r\nimport NewTodo from '../NewTodo/NewTodo';\r\n\r\nexport const Header = ({ addTodo }) => (\r\n  <header className=\"header\">\r\n    <h1>todos</h1>\r\n    <NewTodo addTodo={addTodo} />\r\n  </header>\r\n);\r\n\r\nHeader.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport TodoList from './components/TodoList/TodoList';\r\nimport { Footer } from './components/Footer/Footer';\r\nimport { Header } from './components/Header/Header';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [],\r\n    showParam: 'all',\r\n  };\r\n\r\n  addTodo = (todo) => {\r\n    this.setState(prevState => ({\r\n      todos: [...prevState.todos, todo],\r\n    }));\r\n  }\r\n\r\n  updateTodosToShow = (todoToShow) => {\r\n    this.setState({ showParam: todoToShow });\r\n  }\r\n\r\n  handleRemove = (id) => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.filter(todo => (\r\n        todo.id !== id\r\n      )),\r\n    }));\r\n  }\r\n\r\n  handleDobleClick = ({ id }) => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.map(todo => (\r\n        (todo.id !== id) ? ({\r\n          ...todo, editing: false,\r\n        }) : ({\r\n          ...todo, editing: true,\r\n        })\r\n      )),\r\n    }));\r\n  }\r\n\r\n  editTodo = (content) => {\r\n    if (content) {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.map(todo => (\r\n          (todo.editing) ? ({\r\n            ...todo, content,\r\n          }) : todo)),\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.filter(todo => (\r\n          !todo.editing\r\n        )),\r\n      }));\r\n    }\r\n  }\r\n\r\n  handleRemoveCompleted = () => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.filter(todo => (\r\n        !todo.completed\r\n      )),\r\n    }));\r\n  }\r\n\r\n  toggleComplete = (id) => {\r\n    this.setState(prevState => ({\r\n      todos: prevState.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n          };\r\n        }\r\n\r\n        return todo;\r\n      }),\r\n    }));\r\n  }\r\n\r\n  toggleCompleteAll = () => {\r\n    if (this.state.todos.every(todo => (todo.completed))) {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.map(todo => ({\r\n          ...todo,\r\n          completed: false,\r\n        })),\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.map(todo => ({\r\n          ...todo,\r\n          completed: true,\r\n        })),\r\n      }));\r\n    }\r\n  }\r\n\r\n  getTodos = (status) => {\r\n    let todoView = [];\r\n    const { todos } = this.state;\r\n\r\n    switch (status) {\r\n      case 'active':\r\n        todoView = todos.filter(todo => (\r\n          !todo.completed\r\n        ));\r\n        break;\r\n      case 'completed':\r\n        todoView = todos.filter(todo => (\r\n          todo.completed\r\n        ));\r\n        break;\r\n      default:\r\n        todoView = todos;\r\n    }\r\n\r\n    return todoView;\r\n  }\r\n\r\n  render() {\r\n    const { todos, showParam } = this.state;\r\n    const todoView = this.getTodos(showParam);\r\n    const itemLeft = todos.filter(todo => (\r\n      !todo.completed)).length;\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <Header addTodo={this.addTodo} />\r\n        {(todos.length)\r\n          ? (\r\n            <>\r\n              <section className=\"main\">\r\n                <input\r\n                  onClick={this.toggleCompleteAll}\r\n                  checked={!itemLeft}\r\n                  type=\"checkbox\"\r\n                  id=\"toggle-all\"\r\n                  className=\"toggle-all\"\r\n                />\r\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n                <TodoList\r\n                  todos={todoView}\r\n                  remove={this.handleRemove}\r\n                  toggleComplete={this.toggleComplete}\r\n                  handleDobleClick={this.handleDobleClick}\r\n                  editTodo={this.editTodo}\r\n                />\r\n              </section>\r\n              <Footer\r\n                itemLeft={itemLeft}\r\n                todos={todos}\r\n                updateTodosToShow={this.updateTodosToShow}\r\n                handleRemoveCompleted={this.handleRemoveCompleted}\r\n              />\r\n            </>\r\n          ) : ''}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}